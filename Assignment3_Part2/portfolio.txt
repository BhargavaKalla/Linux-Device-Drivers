**************************************************************************************************************************
Attached code is an application that uses a device driver to control an animation on a 8x8 display by sensing the object 
distance from an ultrasonic sensor. I am attaching three files main.c and two device driver modules led_dev.c and pulse_dev.c.
I am also attaching the make and .sh files used in execution and read me file of the project. This project was done in a team 
of two. Me and my friend pragna. 
****************************************************************************************************************************** 
main.c
**************************************************************************************************************************

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>
#include <poll.h>
#include <errno.h>
#include <linux/spi/spidev.h>
#include <sys/ioctl.h>
#include <linux/types.h>
#include <pthread.h>
#include <time.h>
#include <stdint.h>
#include "spi_gpio_module.h"

#define ARRAY_SIZE(array) sizeof(array)/sizeof(array[0])       //to hold the length attribute of spi_ioc_transfer
#define SPI_MODE SPI_MODE_0           //SPI_MODE_0 for write mode of SPI bus
#define MSB_FIRST 0		//to enable MSB_FIRST mode

pthread_mutex_t lock;
pthread_t distance_thread, display_thread;
int spi_dev;
long double pulse_width, current_distance, previous_distance = 0.0;

/* dog walking and running patterns for LED Matrix */
uint8_t dog_right_walk[8] = {0x08, 0x90, 0xF0, 0x10, 0x10, 0x37, 0xDF, 0x98};
uint8_t	dog_right_run[8] = {0x20, 0x10, 0x70, 0xD0, 0x10, 0x97, 0xFF, 0x18};
uint8_t	dog_left_walk[8] = {0x18, 0xDF, 0xB7, 0x10, 0x10, 0xF0, 0x90, 0x08};
uint8_t	dog_left_run[8] = {0x18, 0xFF, 0x97, 0x10, 0xD0, 0x70, 0x10, 0x20};

/* row addresses of LED Matrix */
uint8_t	led_row_address[8] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};

/* Control register values for LED Matrix */
uint8_t	control_reg_address[8] = {0x09, 0x00, 0x0A, 0x00, 0x0B, 0x07, 0x0C, 0x01};

static uint8_t mode = SPI_MODE;
static uint8_t lsb = MSB_FIRST;
static uint8_t bits = 8;
static uint32_t speed = 50000;

char buf[256];

/* structure variable for poll function */
struct pollfd fdp;

/* To hold the start and end times of the echo pulse */
unsigned long long startTime, endTime;

/* Function to calculate time stamp counter */
static __inline__ unsigned long long rdtsc(void)
{
     unsigned a, d;
     asm volatile("rdtsc" : "=a" (a), "=d" (d));

     return (((unsigned long long)a) | (((unsigned long long)d) << 32));
}

/* To open the spi bus before start of data transfer */
void spidevSet(){
	spi_dev = open("/dev/spidev1.0",O_WRONLY);
	if(spi_dev < 0) {
		printf("not able to open spidev1.0");
	}	
}

/***************************** Thread function to measure distance from HC-SR04 sensor ******************************/
void* calculateDistance(void *ptr)
{
	int value;
	sprintf(buf, "/sys/class/gpio/gpio%d/value", 14);
	value = open(buf, O_RDWR);  
	fdp.fd = value;
	fdp.events = POLLPRI|POLLERR;
	
	while(1){
		gpioSetEdge(14,"rising");      //to set the rising edge of echo signal
		lseek(fdp.fd, 0, SEEK_SET); 
		read(fdp.fd, buf, 256);
	
		/* To generate trigger pulse to sensor */
		gpioSet(13,1);
		usleep(10);
		gpioSet(13,0);
		
		fdp.revents = 0;
		if(poll(&fdp, 1, 50) > 0){         //to detect the rising edge of echo signal
		
			//to hold the time at which rising echo signal is detected
			startTime = rdtsc();
			lseek(fdp.fd, 0, SEEK_SET); 
			
			//to clear the flag
			read(fdp.fd, buf, 256);
			if(fdp.revents & POLLPRI)   
			{
				gpioSetEdge(14,"falling");         //to set the falling edge of echo signal
				
				if(poll(&fdp, 1, 50) > 0) 	   //to detect the falling edge of echo signal
				{
					//to hold the time at which rising echo signal is detected
					endTime = rdtsc();					
					if(fdp.revents & POLLPRI)
					{
						pthread_mutex_lock(&lock);
						pulse_width = (endTime-startTime)/((long double)400000000);            //to calculate the pulse width of echo signal			
						current_distance = (pulse_width*((long double)17000));                 //to calculate the distance sensed
						printf("distance in cm = %Lf\n", current_distance);
						pthread_mutex_unlock(&lock);
					}			
				}
			}	
		}
		usleep(100000);
	}
}

/****************************** Thread function to control display patterns on LED Matrix ******************************/
void* controlDisplay(void *ptr)
{
	int ret, i = 0;
	//unsigned long spi_speed;
	unsigned char data_out[2]={0};
	unsigned char data_in[2]={0};
	
	gpioSet(15,1);
	
	/* For setting SPI1_SS, IO12 */	
	spidevSet();
	
	//ret = ioctl(spi_dev, SPI_IOC_RD_MAX_SPEED_HZ, &spi_speed);
	
	/* To enable the WR_MODE for spi bus */
	ret = ioctl(spi_dev, SPI_IOC_WR_MODE, &mode);
	if (ret == -1)
		printf("can't set spi mode");
	
	/* To enable the MSB_FIRST for spi bus */
	ret = ioctl(spi_dev, SPI_IOC_WR_LSB_FIRST, &lsb);
	if (ret == -1)
		printf("can't set lsb");
	
	/* To enable the BITS_PER_WORD for spi transfer */
	ret = ioctl(spi_dev, SPI_IOC_WR_BITS_PER_WORD, &bits);
	if (ret == -1)
		printf("can't set bits per word");
	
	/* To enable the MAX_SPEED for spi transfer */	
	ret = ioctl(spi_dev, SPI_IOC_WR_MAX_SPEED_HZ, &speed);
	if (ret == -1)
		printf("can't set max speed hz");
	
	/* structure for spi transfer */
	struct spi_ioc_transfer data = {
		.tx_buf = (unsigned long)data_out,
		.rx_buf = (unsigned long)data_in,
		.len = ARRAY_SIZE(data_out),
		.speed_hz = 500000,
		.cs_change = 1,
		.delay_usecs = 0,
		.bits_per_word = 8,
	};
	
	/* To write values to control register */
	for(i = 0; i < 8; i++){
		data_out[0] = control_reg_address[i];
		data_out[1] = control_reg_address[i+1];
		gpioSet(15,0);
		ioctl(spi_dev, SPI_IOC_MESSAGE(1), &data);	
		gpioSet(15,1);
		i++;
	}
	
	while(1){
		if(current_distance <= previous_distance){
			/* writing LED pattern of dog walking towards right */
			for(i = 0 ;i < 8; i++){
				data_out[0] = led_row_address[i];
				data_out[1] = dog_right_walk[i];
				gpioSet(15,0);
				ioctl(spi_dev, SPI_IOC_MESSAGE(1), &data);	
				gpioSet(15,1);					
			}
			usleep(((int)current_distance)*10000);
			/* writing LED pattern of dog running towards right */
			for(i = 0 ;i < 8; i++){
				data_out[0] = led_row_address[i];
				data_out[1] = dog_right_run[i];
				gpioSet(15,0);
				ioctl(spi_dev, SPI_IOC_MESSAGE(1), &data);	
				gpioSet(15,1);					
			}
		}else if(current_distance > previous_distance){
			/* writing LED pattern of dog walking towards left */
			for(i = 0 ;i < 8; i++){
				data_out[0] = led_row_address[i];
				data_out[1] = dog_left_walk[i];
				gpioSet(15,0);
				ioctl(spi_dev, SPI_IOC_MESSAGE(1), &data);	
				gpioSet(15,1);					
			}
			usleep(((int)current_distance)*10000);
			/* writing LED pattern of dog running towards left */
			for(i = 0 ;i < 8; i++){
				data_out[0] = led_row_address[i];
				data_out[1] = dog_left_run[i];
				gpioSet(15,0);
				ioctl(spi_dev, SPI_IOC_MESSAGE(1), &data);	
				gpioSet(15,1);					
			}
		}
		pthread_mutex_lock(&lock);
		previous_distance = current_distance;
		pthread_mutex_unlock(&lock);
		usleep(100000);
	}	
}

/****************************** main program ******************************/
int main(){
	
	/* initializing the mutex lock */
	pthread_mutex_init(&lock, NULL);
	
	/* To initialize the IO pins */
	IOinit();
	
	/* Creation of pthread for LED display pattern */
	pthread_create(&display_thread, NULL, controlDisplay, NULL);
	
	/* Creation of pthread for pulse measurement */
	pthread_create(&distance_thread, NULL, calculateDistance, NULL);
	
	pthread_join(display_thread, NULL);
	pthread_join(distance_thread, NULL);
	
	/* To destroy the mutex lock */
	pthread_mutex_destroy(&lock);
	
	return 0;
}


****************************************************************************************************************************** 
led_dev.c
**************************************************************************************************************************
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/fs.h>
#include <linux/cdev.h>
#include <linux/types.h>
#include <linux/slab.h>
#include <asm/uaccess.h>
#include <linux/string.h>
#include <linux/device.h>
#include<linux/init.h>
#include <linux/spi/spi.h>
#include <linux/spi/spidev.h>
#include <linux/mutex.h>
#include <linux/delay.h>
#include <linux/gpio.h>
#include <linux/version.h>

#define SPIDEV_MAJOR 153 
#define PATTERN_WRITE 0x0000

struct spidev_data {      
        struct spi_device *spi;       
        char *transfer_buf;
        
}*spi_devp;

int flag = 0;
struct spidev_data *spidev;
static struct class *spi_dev_class;          /* Tie with the device model */
static struct device *spi_dev_device;
unsigned int kernel_pattern_list[10][8];
 
/* row addresses of LED Matrix */
unsigned int led_row_address[8] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};

/* Control register values for LED Matrix */
unsigned int control_reg_address[8] = {0x09, 0x00, 0x0A, 0x00, 0x0B, 0x07, 0x0C, 0x01};

static ssize_t led_driver_sync(struct spidev_data *spidev, struct spi_message *message)
{
        int status = 0;
        struct spi_device *spi;        
        spi = spidev->spi;

        if (spi == NULL)
                status = -ESHUTDOWN;
        else
                status = spi_sync(spi, message);

        if (status == 0)
                status = message->actual_length;

        return status;
}

static inline ssize_t led_driver_sync_write(struct spidev_data *spidev, size_t len)
{
        unsigned char data_in[2]={0};
	struct spi_transfer data = {
			.tx_buf = spidev->transfer_buf,
			.rx_buf = data_in,
			.len = 2,
			.speed_hz = 500000,
			.cs_change = 1,
			.delay_usecs = 0,
			.bits_per_word = 8,
	};
        struct spi_message m;
        spi_message_init(&m);
        spi_message_add_tail(&data, &m);
        return led_driver_sync(spidev, &m);
}

/* Write-only message with current device setup */
static ssize_t led_driver_write(struct file *filp, const char __user *buf, size_t count, loff_t *f_pos)
{	
        ssize_t status = 0;
        unsigned long missing;        
	int i, j, k, leng;
	int *seq_buf;
	char *data_out = kmalloc(2*sizeof(char), GFP_KERNEL);
	leng = 6;
	gpio_set_value_cansleep(15,1);
	
	seq_buf = kmalloc(6*sizeof(int),GFP_KERNEL);
		
        spidev->transfer_buf = kmalloc(2*sizeof(char), GFP_KERNEL);
        if (!spidev->transfer_buf)
        	return -ENOMEM;	
        
        spidev->transfer_buf = data_out;
       
       	/* To copy the sequence pattern from user */
        missing = copy_from_user((void *)seq_buf, (void *)buf, count);
        
        if(missing == 0){
        
		/* To set the values of control registers of LED Matrix */
		if (!flag)
		{
			for(i = 0; i < 8; i = i + 2){
				data_out[0] = control_reg_address[i];
				data_out[1] = control_reg_address[i+1];
				gpio_set_value_cansleep(15,0);
				status = led_driver_sync_write(spidev, 2*(sizeof(char)));
				gpio_set_value_cansleep(15,1);					
				flag++;
			}
		}
		/* To display the sequence of patterns */   
		for(j = 0; j < leng; j = j + 2){
			k = seq_buf[j];
			/* To check the termination of the sequence */
			if(seq_buf[j] == 0 && seq_buf[j+1] == 0){
				/* To switch off the LED display */
				for(i = 0; i < 8; i++){
					data_out[0] = led_row_address[i];
					data_out[1] = 0x00;
					gpio_set_value_cansleep(15,0);
					status = led_driver_sync_write(spidev, 2*(sizeof(char)));
					gpio_set_value_cansleep(15,1);
					msleep(5);	/* Delay to display the LED off state at the end of sequence */ 								
				} 
				return 0;      
			}else{
				/* To display the pattern received from user space */
				for(i = 0; i < 8; i++){
					data_out[0] = led_row_address[i];
					data_out[1] = kernel_pattern_list[k][i];
					gpio_set_value_cansleep(15,0);
					status = led_driver_sync_write(spidev, 2*(sizeof(char)));
					gpio_set_value_cansleep(15,1);								
				}             	       	
			}
			/* sleep for the time received from user sequence */
			msleep(seq_buf[j+1]);
		}	
        }	
        return 0;
}

/* To have the patterns in user space to be copied to kernel space buffer */
long led_driver_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
{
	int i, j;
	unsigned int **pattern;
	pattern = (unsigned int **)arg; 
	switch(cmd){
		case PATTERN_WRITE: 
				for(i = 0; i < 10; i++)
					for(j = 0; j < 8; j++)
					{
				 		kernel_pattern_list[i][j] = pattern[i][j];  
				 	}	
				 break;
		default: asm volatile("nop"); 	
	}		
        return 0;
}

/*
 * Open led driver
 */
int led_driver_open(struct inode *inode, struct file *file)
{	
	printk("led device is opening\n");
	return 0;
}

/*
 * Release led driver
 */
int led_driver_release(struct inode *inode, struct file *file)
{	
	/* To free the gpio's */
        gpio_free(24);
        gpio_free(44);
        gpio_free(72);
        gpio_free(30);
        gpio_free(46);
        gpio_free(42);
        gpio_free(15);
	
	printk("\n led device is closing\n");
	return 0;
}

/*
 * Read to led driver
 */
ssize_t led_driver_read(struct file *file, char *buf, size_t count, loff_t *ppos)
{
	int bytes_read = 0;
	return bytes_read;
}

/* File operations structure. Defined in linux/fs.h */
static struct file_operations spidev_fops = {
    .owner		= THIS_MODULE,           /* Owner */
    .open		= led_driver_open,        /* Open method */
    .release		= led_driver_release,     /* Release method */
    .write		= led_driver_write,       /* Write method */
    .read		= led_driver_read,        /* Read method */
    .unlocked_ioctl	= led_driver_ioctl,       /* IO Control method */
};

static int led_driver_probe(struct spi_device *spi)
{
        /* Allocate driver data */
        spidev = kmalloc(sizeof(struct spidev_data), GFP_KERNEL);
        if (!spidev)
                return -ENOMEM;

        /* Initialize the driver data */
        spidev->spi = spi;
	
	/* Device creation */
	spi_dev_device = device_create(spi_dev_class, &spi->dev, MKDEV(SPIDEV_MAJOR, 0), spidev, "spidev%d.%d", spi->master->bus_num, spi->chip_select);

        return 0;
}

static int led_driver_remove(struct spi_device *spi){
	device_destroy(spi_dev_class, MKDEV(SPIDEV_MAJOR, 0));
	return 0;
}	

static struct spi_driver spidev_spi_driver = {	
        .driver = {
                .name = "spidev",
        },
        .probe = led_driver_probe,
        .remove = led_driver_remove,
};

/*
 * Driver Initialization
 */
int __init led_driver_init(void)
{
	int ret;

	/* Registering the device */
	ret = register_chrdev(SPIDEV_MAJOR, "spi", &spidev_fops);
        if (ret < 0)
                return ret;
        
        /* creating class for the module */
	spi_dev_class = class_create(THIS_MODULE, "spidev");
	if (IS_ERR(spi_dev_class)) {
		printk("spi dev class creation\n");
	}
        
        /* To register the device */        
        spi_register_driver(&spidev_spi_driver);
		
       	/* To export and set the gpio pins required for LED screen display*/
	/* ------------- This is for setting SPI1_MOSI i.e., GPIO11 ------------- */	
	/*For setting level shifter pin */
	gpio_request(24, "MOSI LS");
	gpio_direction_output(24,0);
	gpio_set_value_cansleep(24,0);
	
	/*To set the Multiplexer1 */
	gpio_request(44, "IO11 MUX1");
	gpio_direction_output(44,0);
	gpio_set_value_cansleep(44,1);
	
	/*To set the Multiplexer2 */
	gpio_request(72, "IO11 MUX2");
	gpio_direction_output(72,0);
	gpio_set_value_cansleep(72,0);
	
	/* ------------- For setting SPI1_SCK, GPIO13 ------------- */		
	/*For setting level shifter pin */
	gpio_request(30, "SCK LS");
	gpio_direction_output(30,0);
	gpio_set_value_cansleep(30,0);

	/*To set the Multiplexer */	
	gpio_request(46, "IO13 MUX");
	gpio_direction_output(46,0);
	gpio_set_value_cansleep(46,1);
	
	/* To use IO12 as CS gpio pin */
	gpio_request(15, "CS");
	gpio_direction_output(15,0);
	
	/*For setting level shifter pin for chip select, IO12 */
	gpio_request(42, "CS LS");
	gpio_direction_output(42,0);
	gpio_set_value_cansleep(42,0);
	
	printk("led driver initialized.\n");
	return 0;
}

/* Driver Exit */
void __exit led_driver_exit(void)
{
        /* to unregister the device */
	spi_unregister_driver(&spidev_spi_driver);
	
	/* to destroy the class */
	class_destroy(spi_dev_class);
	unregister_chrdev(SPIDEV_MAJOR, spidev_spi_driver.driver.name);

	printk("led driver removed.\n");
}

/* calling module initialization and exit */
module_init(led_driver_init);
module_exit(led_driver_exit);
MODULE_LICENSE("GPL v2");


****************************************************************************************************************************** 
pulse_dev.c
**************************************************************************************************************************
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/fs.h>
#include <linux/cdev.h>
#include <linux/types.h>
#include <linux/slab.h>
#include <asm/uaccess.h>
#include <linux/string.h>
#include <linux/device.h>
#include <linux/init.h>
#include <linux/interrupt.h>
#include <linux/mutex.h>
#include <linux/gpio.h>
#include <linux/delay.h>
#include <linux/time.h>
#define DEVICE_NAME "pulse_dev"  // device name to be created and registered
static DEFINE_MUTEX(pulse_width_lock);

/* per device structure */
struct pulse_dev {
	struct cdev cdev;               /* The cdev structure */
	char name[20];  		/* Name of device */
	unsigned long long width;                
} *pulse_devp;

static dev_t pulse_dev_number;      /* Allotted device number */
struct class *pulse_dev_class;          /* Tie with the device model */
static struct device *pulse_dev_device;
unsigned int irqNumber;
unsigned long long pulse_width, startTime, endTime;
bool check_echo_status = false;
bool edge_detect = false;

/* Time stamp counter */
static __inline__ unsigned long long rdtsc(void)
{
     unsigned a, d;
     asm volatile("rdtsc" : "=a" (a), "=d" (d));

     return (((unsigned long long)a) | (((unsigned long long)d) << 32));
}

/*
 * Open pulse driver
 */
int pulse_driver_open(struct inode *inode, struct file *file)
{
	struct pulse_dev *pulse_devp;

	/* Get the per-device structure that contains this cdev */
	pulse_devp = container_of(inode->i_cdev, struct pulse_dev, cdev);


	/* Easy access to cmos_devp from rest of the entry points */
	file->private_data = pulse_devp;
	printk("\n%s is openning \n", pulse_devp->name);
	return 0;
}

/*
 * Release pulse driver
 */
int pulse_driver_release(struct inode *inode, struct file *file)
{
	struct pulse_dev *pulse_devp = file->private_data;
	
	printk("\n%s is closing\n", pulse_devp->name);
	
	/* To free the GPIO's */
	gpio_free(13);
        gpio_free(34);
        gpio_free(77);
        gpio_free(14);
        gpio_free(76);
        gpio_free(64);
	return 0;
}

/* ISR to handle the interrupt on echo signal */
static irq_handler_t pulse_measurement(unsigned int irq, void *dev_id, struct pt_regs *regs){
	if(!check_echo_status)
	{
		startTime = rdtsc();			//to measure the start time of echo pulse
		irq_set_irq_type(irqNumber, IRQF_TRIGGER_FALLING);		//to set the irq_type to falling
		check_echo_status = true;
	}else if(check_echo_status){
		endTime = rdtsc();			//to measure the end time of echo pulse
		irq_set_irq_type(irqNumber, IRQF_TRIGGER_RISING);		//to set the irq_type to rising
		edge_detect = true;			//to indicate echo pulse is detected
		check_echo_status = false;	
	}	
	return (irq_handler_t) IRQ_HANDLED;
}

/*
 * Write to pulse driver
 */
ssize_t pulse_driver_write(struct file *file, const char *buf, size_t count, loff_t *ppos)
{
	/* to generate trigger signal */
	gpio_set_value_cansleep(13,1);
	udelay(10);
	gpio_set_value_cansleep(13,0);	
	
	return 0;
}

/*
 * Read to pulse driver
 */
ssize_t pulse_driver_read(struct file *file, char *buf, size_t count, loff_t *ppos)
{
	int i;
	unsigned long long count1 = 0;	
	struct pulse_dev *pulse_devp = file->private_data;
	
	/* To check if pulse is detected or not and calculate the pulse width */
	if(edge_detect){
		edge_detect = false;
		pulse_devp->width = endTime-startTime;
		for(i = 0; count1 < (endTime-startTime); i++)
			count1 = count1 + 400;
		
		/* To copy the pulse width value to the user space */
		//value = copy_to_user(buf, (char *)p, sizeof(long long));	
		return i - 1;		
	}
	else
		return -1;
}

/* File operations structure. Defined in linux/fs.h */
static struct file_operations pulse_fops = {
    .owner		= THIS_MODULE,              /* Owner */
    .open		= pulse_driver_open,        /* Open method */
    .release		= pulse_driver_release,     /* Release method */
    .write		= pulse_driver_write,       /* Write method */
    .read		= pulse_driver_read,        /* Read method */
};

/*
 * Driver Initialization
 */
int __init pulse_driver_init(void)
{
	int ret;
	
	/* Request dynamic allocation of a device major number */
	if (alloc_chrdev_region(&pulse_dev_number, 0, 1, DEVICE_NAME) < 0) {
			printk(KERN_DEBUG "Can't register device\n"); return -1;
	}

	/* Populate sysfs entries */
	pulse_dev_class = class_create(THIS_MODULE, DEVICE_NAME);

	/* Allocate memory for the per-device structure */
	pulse_devp = kmalloc(sizeof(struct pulse_dev), GFP_KERNEL);
		
	if (!pulse_devp) {
		printk("Bad Kmalloc\n"); return -ENOMEM;
	}

	/* Request I/O region */
	sprintf(pulse_devp->name, DEVICE_NAME);

	/* Connect the file operations with the cdev */
	cdev_init(&pulse_devp->cdev, &pulse_fops);
	pulse_devp->cdev.owner = THIS_MODULE;

	/* Connect the major/minor number to the cdev */
	ret = cdev_add(&pulse_devp->cdev, (pulse_dev_number), 1);

	if (ret) {
		printk("Bad cdev\n");
		return ret;
	}

	/* Send uevents to udev, so it'll create /dev nodes */
	pulse_dev_device = device_create(pulse_dev_class, NULL, MKDEV(MAJOR(pulse_dev_number), 0), NULL, DEVICE_NAME);	
	
	/* To initialize the IO pins */
	/******************** To intialize the gpio pins for sending trigger pulse to the sensor *******************/	
	/* To set the IO2 */
	gpio_request(13, "trigger");
	gpio_direction_output(13,0);
	
	/* For setting level shifter pin */
	gpio_request(34, "triggerLS");
	gpio_direction_output(34,0);
	gpio_set_value_cansleep(34,0);
	
	/* For setting the multiplexer */
	gpio_request(77, "triggerMUX");
	gpio_set_value_cansleep(77,0);
	

	/******************* This is to intialize the gpio pins for receiving echo pulse from the sensor ******************/
	/* To set the IO3 */
	gpio_request(14, "echo");
	gpio_direction_input(14);
	
	/* For setting Multilplexer1 */
	gpio_request(76, "echoMUX1");
	gpio_set_value_cansleep(76,0);
	
	/* For setting Multiplexer2 */
	gpio_request(64, "echoMux2");
	gpio_set_value_cansleep(64,0);	
	
	/* Request IRQ number for Echo signal pin */
	irqNumber = gpio_to_irq(14);
	
	/* Request IRQ for handling interrupts on echo singal */
	ret = request_irq(irqNumber, (irq_handler_t) pulse_measurement, IRQF_TRIGGER_RISING, "pulse measure", NULL);
	
	printk("pulse driver initialized.\n");
	return 0;
}

/* Driver Exit */
void __exit pulse_driver_exit(void)
{
	/* Release the major number */
	unregister_chrdev_region((pulse_dev_number), 1);

	/* Destroy device */
	device_destroy (pulse_dev_class, MKDEV(MAJOR(pulse_dev_number), 0));
	cdev_del(&pulse_devp->cdev);
	kfree(pulse_devp);
	
	/* Destroy driver_class */
	class_destroy(pulse_dev_class);

	printk("pulse driver removed.\n");
}

/* calling module initialization and exit */
module_init(pulse_driver_init);
module_exit(pulse_driver_exit);
MODULE_LICENSE("GPL v2");

****************************************************************************************************************************** 
make file
**************************************************************************************************************************
HOME = /opt/iot-devkit/1.7.3/sysroots
KDIR:=$(HOME)/i586-poky-linux/usr/src/kernel  
PATH := $(PATH):$(HOME)/x86_64-pokysdk-linux/usr/bin/i586-poky-linux
CROSS_COMPILE = i586-poky-linux-
SROOT=$(HOME)/i586-poky-linux/
CC = i586-poky-linux-gcc
ARCH = x86
APP = hscr_tester


obj-m:= led_dev.o pulse_dev.o


all:

	make ARCH=$(ARCH) CROSS_COMPILE=$(CROSS_COMPILE) -C $(KDIR) M=$(PWD) modules

	$(CC) -o $(APP) main.c -lpthread -lm -Wall -g --sysroot=$(SROOT)

clean:

	rm -f *.ko
	rm -f *.o
	rm -f Module.symvers
	rm -f modules.order
	rm -f *.mod.c
	rm -rf .tmp_versions
	rm -f *.mod.c
	rm -f *.mod.o
	rm -f \.*.cmd
	rm -f Module.markers
	rm -f $(APP)


****************************************************************************************************************************** 
board.sh
**************************************************************************************************************************
rmmod spidev
rmmod led_dev.ko
rmmod pulse_dev.ko
insmod led_dev.ko
insmod pulse_dev.ko
gcc -o main main.c -lpthread
./main

****************************************************************************************************************************** 
copy.sh
**************************************************************************************************************************
make clean
make
scp main.c root@<IP address>:/home/root/part2
scp led_dev.ko root@<IP address>:/home/root/part2
scp pulse_dev.ko root@<IP address>:/home/root/part2
scp board.sh root@<IP address>:/home/root/part2


****************************************************************************************************************************** 
readme file
**************************************************************************************************************************
###############################
Description
###############################

This program defines an led_dev driver module for the MAX7219-MAX7221 LED Matrix display device to perform ioctl and write operations.
This driver module supports four calls namely open, ioctl, write and close.
Ioctl function is to store 10 display patterns in a kernel space buffer and write function is to write patterns on the LED Matrix display.

This program also defines an pulse_dev driver module for the HCSR04 sensor to perform read and write operations.
This driver module supports four calls namely open, read, write and close.
Write function is to setup the trigger to be given to the sensor and raise an interrupt for echo signal and read function is to calculate the pulse width of the echo signal.


###############################
Steps to execute
###############################

#On the host machine, place the files led_dev.c, main.c, pulse_dev.c and Makefile into a directory. From the same directory type the command "make" in terminal.
#Now you are able to see the led_dev.ko and pulse_dev.ko files in the same directory. 
#Connect the board to a host and setup a serial connection between the host and the board.
#Retrieve the IP address of the board.
#Login to the board and create a directory namely "part2" using the command "mkdir part2". 
#Open the copy.sh file and change the IP address in scp <file name> root@<IP ADDRESS>:/home/root/part1 to current board IP address
#Now type the following commands by entering into the directory containing the files in host terminal

#bash copy.sh


#Now on the serial terminal that is accessing the board(target) enter into the part1 directory using the command "cd part2".
#Now type the following commands to execute the program and obtain the result.

#bash board.sh

###############################
NOTE
###############################

This program is tested on the Galileo Gen2 board that has the linux image booted on it using a micro SD card.
OHost machine has the following configuration.
Host machine has the following configuration.
#OS - Linux
#Distro - Ubuntu 16.04.2
#Linux kernel version - 4.4.0-38-generic
#gcc version 5.4.0 20160609
Contact GitHub 




